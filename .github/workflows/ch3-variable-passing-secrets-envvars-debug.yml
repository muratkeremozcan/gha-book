name: Ch3 VariablePassing Secrets EnvVars Debug

on: [workflow_dispatch, pull_request]

# super debug mode
env:
  ACTIONS_STEP_DEBUG: true
  ACTIONS_RUNNER_DEBUG: true

jobs:
  ch3-varPassing-secrets-envVars-debug:
    runs-on: ubuntu-latest
    # We added an environment and defined 2 values in repo settings,
    # this is an alternative to using an env property at yml file level
    # where we would define an env: prop at the top level or at step level.
    # But, if the env vars are common between multiple yml files, this approach is better
    #
    # env vars are in 3 flavors:
    # Organization level > Repository level (what we did here) > yml file level
    environment: test

    permissions:
      # needed for the checkout action
      contents: read
      # needed to annotate the files in a pull request with comments
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Access secrets
        run: |
          echo "Secret: [${{ secrets.CONNECTION_STRING }}]"
          echo "Var: [${{ vars.MY_VAR }}]"

      # mind that the error causes an annotation error (expected) https://github.com/muratkeremozcan/gha-book/actions/runs/12856880055/job/35844088971?pr=3
      - name: Write messages to the log
        run: |
          echo "::debug::This is a debug message"
          echo "::warning file=app.js,line=1,col=51,endColumn=52::Missing semicolon"
          echo "::error file=app.js,line=2,col=1,endColumn=7::Error in app.js"

      # passing an output to subsequent steps/jobs
      # echo "{name}={value}" >> "$GITHUB_OUTPUT"
      # setting an env var
      # echo "{name}={value}" >> "$GITHUB_ENV"
      # - **Secrets:** Encrypted, used for sensitive data, accessed via `${{ secrets.NAME }}`.
      # - **Variables:** Non-sensitive, used for configuration, accessed via `${{ vars.NAME }}`.
      # Managed at organization, repository, or environment levels with hierarchical overrides.
      - name: generate, mask and output a secret
        id: sets-a-secret
        run: |
          the_secret='123456'
          echo "$the_secret"
          echo "::add-mask::$the_secret"
          echo "secret-number=$the_secret" >> "$GITHUB_OUTPUT" 
          the_secret_state='abcd'
          echo "secret-state=$the_secret_state" >> "$GITHUB_ENV"

      - name: Use that secret output (protected by mask)
        run: |
          echo "the secret number is ${{ steps.sets-a-secret.outputs.secret-number }}"
          echo "${{ steps.sets-a-secret.outputs.secret-number }}" | sed 's/./& /g'
          echo "the secret state is ${{ env.secret-state }}"

      - name: Add Summary to Step Summary
        run: |
          echo "### Workflow Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "**Accessed Secrets and Variables:**" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Connection String:** [REDACTED]" >> "$GITHUB_STEP_SUMMARY"
          echo "- **My Var:** ${{ vars.MY_VAR }}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "**Generated Secrets:**" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Secret Number:** ${{ steps.sets-a-secret.outputs.secret-number }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Secret State:** ${{ env.secret-state }}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "**Log Messages:**" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Debug Message:** This is a debug message" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Warning:** Missing semicolon in app.js at line 1, column 51-52" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Error:** Error in app.js at line 2, column 1-7" >> "$GITHUB_STEP_SUMMARY"
